//
//  main.cpp
//  steer_p
//
//  Created by sohaib on 14/01/16.
//  Copyright Â© 2016 RWTH. All rights reserved.
//

#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/imgcodecs.hpp>

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <cmath>

using namespace cv;
using namespace std;
Mat mma;


float rela[10] = {-1,0,1,0,-1,0,1,0,-1,0};   // i^(0 to 9) real part
float imagn[10] = {0,-1,0,1,0,-1,0,-1,0,-1};// i^(0 to 9) imaginary part

float Xrcos[259] = { -1.003906, -1.000000, -0.996094, -0.992188, -0.988281, -0.984375, -0.980469, -0.976563, -0.972656, -0.968750, -0.964844, -0.960938, -0.957031, -0.953125, -0.949219, -0.945313, -0.941406, -0.937500, -0.933594, -0.929688, -0.925781, -0.921875, -0.917969, -0.914063, -0.910156, -0.906250, -0.902344, -0.898438, -0.894531, -0.890625, -0.886719, -0.882813, -0.878906, -0.875000, -0.871094, -0.867188, -0.863281, -0.859375, -0.855469, -0.851563,
    -0.847656, -0.843750, -0.839844, -0.835938, -0.832031, -0.828125, -0.824219, -0.820313, -0.816406, -0.812500, -0.808594, -0.804688, -0.800781, -0.796875, -0.792969, -0.789063, -0.785156, -0.781250, -0.777344, -0.773438, -0.769531, -0.765625, -0.761719, -0.757813, -0.753906, -0.750000, -0.746094, -0.742188, -0.738281, -0.734375, -0.730469, -0.726563, -0.722656, -0.718750, -0.714844, -0.710938, -0.707031, -0.703125, -0.699219, -0.695313,
    -0.691406, -0.687500, -0.683594, -0.679688, -0.675781, -0.671875, -0.667969, -0.664063, -0.660156, -0.656250, -0.652344, -0.648438, -0.644531, -0.640625, -0.636719, -0.632813, -0.628906, -0.625000, -0.621094, -0.617188, -0.613281, -0.609375, -0.605469, -0.601563, -0.597656, -0.593750, -0.589844, -0.585938, -0.582031, -0.578125, -0.574219, -0.570313, -0.566406, -0.562500, -0.558594, -0.554688, -0.550781, -0.546875, -0.542969, -0.539063,
    -0.535156, -0.531250, -0.527344, -0.523438, -0.519531, -0.515625, -0.511719, -0.507813, -0.503906, -0.500000, -0.496094, -0.492188, -0.488281, -0.484375, -0.480469, -0.476563, -0.472656, -0.468750, -0.464844, -0.460938, -0.457031, -0.453125, -0.449219, -0.445313, -0.441406, -0.437500, -0.433594, -0.429688, -0.425781, -0.421875, -0.417969, -0.414063, -0.410156, -0.406250, -0.402344, -0.398438, -0.394531, -0.390625, -0.386719, -0.382813,
    -0.378906, -0.375000, -0.371094, -0.367188, -0.363281, -0.359375, -0.355469, -0.351563, -0.347656, -0.343750, -0.339844, -0.335938, -0.332031, -0.328125, -0.324219, -0.320313, -0.316406, -0.312500, -0.308594, -0.304688, -0.300781, -0.296875, -0.292969, -0.289063, -0.285156, -0.281250, -0.277344, -0.273438, -0.269531, -0.265625, -0.261719, -0.257813, -0.253906, -0.250000, -0.246094, -0.242188, -0.238281, -0.234375, -0.230469, -0.226563,
    -0.222656, -0.218750, -0.214844, -0.210938, -0.207031, -0.203125, -0.199219, -0.195313, -0.191406, -0.187500, -0.183594, -0.179687, -0.175781, -0.171875, -0.167969, -0.164063, -0.160156, -0.156250, -0.152344, -0.148438, -0.144531, -0.140625, -0.136719, -0.132812, -0.128906, -0.125000, -0.121094, -0.117188, -0.113281, -0.109375, -0.105469, -0.101563, -0.097656, -0.093750, -0.089844, -0.085938, -0.082031, -0.078125, -0.074219, -0.070312,
    -0.066406, -0.062500, -0.058594, -0.054688, -0.050781, -0.046875, -0.042969, -0.039063, -0.035156, -0.031250, -0.027344, -0.023438, -0.019531, -0.015625, -0.011719, -0.007812, -0.003906, 0.000000, 0.003906 };
//for Highpass
float Yrcos[259] = { 0.000000, 0.000000, 0.006136, 0.012272, 0.018407, 0.024541, 0.030675, 0.036807, 0.042938, 0.049068, 0.055195, 0.061321, 0.067444, 0.073565, 0.079682, 0.085797, 0.091909, 0.098017, 0.104122, 0.110222, 0.116319, 0.122411, 0.128498, 0.134581, 0.140658, 0.146730, 0.152797, 0.158858, 0.164913, 0.170962, 0.177004, 0.183040, 0.189069, 0.195090, 0.201105, 0.207111, 0.213110, 0.219101, 0.225084, 0.231058,
    0.237024, 0.242980, 0.248928, 0.254866, 0.260794, 0.266713, 0.272621, 0.278520, 0.284408, 0.290285, 0.296151, 0.302006, 0.307850, 0.313682, 0.319502, 0.325310, 0.331106, 0.336890, 0.342661, 0.348419, 0.354164, 0.359895, 0.365613, 0.371317, 0.377007, 0.382683, 0.388345, 0.393992, 0.399624, 0.405241, 0.410843, 0.416430, 0.422000, 0.427555, 0.433094, 0.438616, 0.444122, 0.449611, 0.455084, 0.460539,
    0.465976, 0.471397, 0.476799, 0.482184, 0.487550, 0.492898, 0.498228, 0.503538, 0.508830, 0.514103, 0.519356, 0.524590, 0.529804, 0.534998, 0.540171, 0.545325, 0.550458, 0.555570, 0.560662, 0.565732, 0.570781, 0.575808, 0.580814, 0.585798, 0.590760, 0.595699, 0.600616, 0.605511, 0.610383, 0.615232, 0.620057, 0.624859, 0.629638, 0.634393, 0.639124, 0.643832, 0.648514, 0.653173, 0.657807, 0.662416,
    0.667000, 0.671559, 0.676093, 0.680601, 0.685084, 0.689541, 0.693971, 0.698376, 0.702755, 0.707107, 0.711432, 0.715731, 0.720003, 0.724247, 0.728464, 0.732654, 0.736817, 0.740951, 0.745058, 0.749136, 0.753187, 0.757209, 0.761202, 0.765167, 0.769103, 0.773010, 0.776888, 0.780737, 0.784557, 0.788346, 0.792107, 0.795837, 0.799537, 0.803208, 0.806848, 0.810457, 0.814036, 0.817585, 0.821103, 0.824589,
    0.828045, 0.831470, 0.834863, 0.838225, 0.841555, 0.844854, 0.848120, 0.851355, 0.854558, 0.857729, 0.860867, 0.863973, 0.867046, 0.870087, 0.873095, 0.876070, 0.879012, 0.881921, 0.884797, 0.887640, 0.890449, 0.893224, 0.895966, 0.898674, 0.901349, 0.903989, 0.906596, 0.909168, 0.911706, 0.914210, 0.916679, 0.919114, 0.921514, 0.923880, 0.926210, 0.928506, 0.930767, 0.932993, 0.935184, 0.937339,
    0.939459, 0.941544, 0.943593, 0.945607, 0.947586, 0.949528, 0.951435, 0.953306, 0.955141, 0.956940, 0.958703, 0.960431, 0.962121, 0.963776, 0.965394, 0.966976, 0.968522, 0.970031, 0.971504, 0.972940, 0.974339, 0.975702, 0.977028, 0.978317, 0.979570, 0.980785, 0.981964, 0.983105, 0.984210, 0.985278, 0.986308, 0.987301, 0.988258, 0.989177, 0.990058, 0.990903, 0.991710, 0.992480, 0.993212, 0.993907,
    0.994565, 0.995185, 0.995767, 0.996313, 0.996820, 0.997290, 0.997723, 0.998118, 0.998476, 0.998795, 0.999078, 0.999322, 0.999529, 0.999699, 0.999831, 0.999925, 0.999981, 1.000000, 1.000000 };
//for lowpass
float YIrcos[259] = { 1.000000, 1.000000, 0.999981, 0.999925, 0.999831, 0.999699, 0.999529, 0.999322, 0.999078, 0.998795, 0.998476, 0.998118, 0.997723, 0.997290, 0.996820, 0.996313, 0.995767, 0.995185, 0.994565, 0.993907, 0.993212, 0.992480, 0.991710, 0.990903, 0.990058, 0.989177, 0.988258, 0.987301, 0.986308, 0.985278, 0.984210, 0.983105, 0.981964, 0.980785, 0.979570, 0.978317, 0.977028, 0.975702, 0.974339, 0.972940,
    0.971504, 0.970031, 0.968522, 0.966976, 0.965394, 0.963776, 0.962121, 0.960431, 0.958703, 0.956940, 0.955141, 0.953306, 0.951435, 0.949528, 0.947586, 0.945607, 0.943593, 0.941544, 0.939459, 0.937339, 0.935184, 0.932993, 0.930767, 0.928506, 0.926210, 0.923880, 0.921514, 0.919114, 0.916679, 0.914210, 0.911706, 0.909168, 0.906596, 0.903989, 0.901349, 0.898674, 0.895966, 0.893224, 0.890449, 0.887640,
    0.884797, 0.881921, 0.879012, 0.876070, 0.873095, 0.870087, 0.867046, 0.863973, 0.860867, 0.857729, 0.854558, 0.851355, 0.848120, 0.844854, 0.841555, 0.838225, 0.834863, 0.831470, 0.828045, 0.824589, 0.821103, 0.817585, 0.814036, 0.810457, 0.806848, 0.803208, 0.799537, 0.795837, 0.792107, 0.788346, 0.784557, 0.780737, 0.776888, 0.773010, 0.769103, 0.765167, 0.761202, 0.757209, 0.753187, 0.749136,
    0.745058, 0.740951, 0.736817, 0.732654, 0.728464, 0.724247, 0.720003, 0.715731, 0.711432, 0.707107, 0.702755, 0.698376, 0.693971, 0.689541, 0.685084, 0.680601, 0.676093, 0.671559, 0.667000, 0.662416, 0.657807, 0.653173, 0.648514, 0.643832, 0.639124, 0.634393, 0.629638, 0.624859, 0.620057, 0.615232, 0.610383, 0.605511, 0.600616, 0.595699, 0.590760, 0.585798, 0.580814, 0.575808, 0.570781, 0.565732,
    0.560662, 0.555570, 0.550458, 0.545325, 0.540171, 0.534998, 0.529804, 0.524590, 0.519356, 0.514103, 0.508830, 0.503538, 0.498228, 0.492898, 0.487550, 0.482184, 0.476799, 0.471397, 0.465976, 0.460539, 0.455084, 0.449611, 0.444122, 0.438616, 0.433094, 0.427555, 0.422000, 0.416430, 0.410843, 0.405241, 0.399624, 0.393992, 0.388345, 0.382683, 0.377007, 0.371317, 0.365613, 0.359895, 0.354164, 0.348419,
    0.342661, 0.336890, 0.331106, 0.325310, 0.319502, 0.313682, 0.307850, 0.302006, 0.296151, 0.290285, 0.284408, 0.278520, 0.272621, 0.266713, 0.260794, 0.254866, 0.248928, 0.242980, 0.237024, 0.231058, 0.225084, 0.219101, 0.213110, 0.207111, 0.201105, 0.195090, 0.189069, 0.183040, 0.177004, 0.170962, 0.164913, 0.158858, 0.152797, 0.146730, 0.140658, 0.134581, 0.128498, 0.122411, 0.116319, 0.110222,
    0.104122, 0.098017, 0.091909, 0.085797, 0.079682, 0.073565, 0.067444, 0.061321, 0.055195, 0.049068, 0.042938, 0.036807, 0.030675, 0.024541, 0.018407, 0.012272, 0.006136, 0.000000, 0.000000};
//factorial lookup table
//factorial lookup table
float facto[13] = { 1.000000, 1.000000, 2.000000, 6.000000, 24.000000,
    120.000000, 720.000000, 5040.000000, 40320.000000, 362880.000000,
    3628800.000000, 39916800.000000, 479001600.000000 };
float Ycosn[3075];
float YIrcos_abs[259];






float Xcosn[3075] = { -6.286253, -6.283185, -6.280117, -6.277049, -6.273981, -6.270913, -6.267845, -6.264778, -6.261710, -6.258642, -6.255574, -6.252506, -6.249438, -6.246370, -6.243302, -6.240234, -6.237166, -6.234098, -6.231030, -6.227962, -6.224894, -6.221826, -6.218758, -6.215690, -6.212622, -6.209554, -6.206486, -6.203418, -6.200350, -6.197282, -6.194214, -6.191146, -6.188078, -6.185011, -6.181943, -6.178875, -6.175807, -6.172739, -6.169671, -6.166603,
    -6.163535, -6.160467, -6.157399, -6.154331, -6.151263, -6.148195, -6.145127, -6.142059, -6.138991, -6.135923, -6.132855, -6.129787, -6.126719, -6.123651, -6.120583, -6.117515, -6.114447, -6.111379, -6.108311, -6.105244, -6.102176, -6.099108, -6.096040, -6.092972, -6.089904, -6.086836, -6.083768, -6.080700, -6.077632, -6.074564, -6.071496, -6.068428, -6.065360, -6.062292, -6.059224, -6.056156, -6.053088, -6.050020, -6.046952, -6.043884,
    -6.040816, -6.037748, -6.034680, -6.031612, -6.028544, -6.025477, -6.022409, -6.019341, -6.016273, -6.013205, -6.010137, -6.007069, -6.004001, -6.000933, -5.997865, -5.994797, -5.991729, -5.988661, -5.985593, -5.982525, -5.979457, -5.976389, -5.973321, -5.970253, -5.967185, -5.964117, -5.961049, -5.957981, -5.954913, -5.951845, -5.948777, -5.945710, -5.942642, -5.939574, -5.936506, -5.933438, -5.930370, -5.927302, -5.924234, -5.921166,
    -5.918098, -5.915030, -5.911962, -5.908894, -5.905826, -5.902758, -5.899690, -5.896622, -5.893554, -5.890486, -5.887418, -5.884350, -5.881282, -5.878214, -5.875146, -5.872078, -5.869010, -5.865943, -5.862875, -5.859807, -5.856739, -5.853671, -5.850603, -5.847535, -5.844467, -5.841399, -5.838331, -5.835263, -5.832195, -5.829127, -5.826059, -5.822991, -5.819923, -5.816855, -5.813787, -5.810719, -5.807651, -5.804583, -5.801515, -5.798447,
    -5.795379, -5.792311, -5.789243, -5.786176, -5.783108, -5.780040, -5.776972, -5.773904, -5.770836, -5.767768, -5.764700, -5.761632, -5.758564, -5.755496, -5.752428, -5.749360, -5.746292, -5.743224, -5.740156, -5.737088, -5.734020, -5.730952, -5.727884, -5.724816, -5.721748, -5.718680, -5.715612, -5.712544, -5.709476, -5.706409, -5.703341, -5.700273, -5.697205, -5.694137, -5.691069, -5.688001, -5.684933, -5.681865, -5.678797, -5.675729,
    -5.672661, -5.669593, -5.666525, -5.663457, -5.660389, -5.657321, -5.654253, -5.651185, -5.648117, -5.645049, -5.641981, -5.638913, -5.635845, -5.632777, -5.629709, -5.626642, -5.623574, -5.620506, -5.617438, -5.614370, -5.611302, -5.608234, -5.605166, -5.602098, -5.599030, -5.595962, -5.592894, -5.589826, -5.586758, -5.583690, -5.580622, -5.577554, -5.574486, -5.571418, -5.568350, -5.565282, -5.562214, -5.559146, -5.556078, -5.553010,
    -5.549942, -5.546875, -5.543807, -5.540739, -5.537671, -5.534603, -5.531535, -5.528467, -5.525399, -5.522331, -5.519263, -5.516195, -5.513127, -5.510059, -5.506991, -5.503923, -5.500855, -5.497787, -5.494719, -5.491651, -5.488583, -5.485515, -5.482447, -5.479379, -5.476311, -5.473243, -5.470175, -5.467108, -5.464040, -5.460972, -5.457904, -5.454836, -5.451768, -5.448700, -5.445632, -5.442564, -5.439496, -5.436428, -5.433360, -5.430292,
    -5.427224, -5.424156, -5.421088, -5.418020, -5.414952, -5.411884, -5.408816, -5.405748, -5.402680, -5.399612, -5.396544, -5.393476, -5.390408, -5.387341, -5.384273, -5.381205, -5.378137, -5.375069, -5.372001, -5.368933, -5.365865, -5.362797, -5.359729, -5.356661, -5.353593, -5.350525, -5.347457, -5.344389, -5.341321, -5.338253, -5.335185, -5.332117, -5.329049, -5.325981, -5.322913, -5.319845, -5.316777, -5.313709, -5.310641, -5.307574,
    -5.304506, -5.301438, -5.298370, -5.295302, -5.292234, -5.289166, -5.286098, -5.283030, -5.279962, -5.276894, -5.273826, -5.270758, -5.267690, -5.264622, -5.261554, -5.258486, -5.255418, -5.252350, -5.249282, -5.246214, -5.243146, -5.240078, -5.237010, -5.233942, -5.230874, -5.227807, -5.224739, -5.221671, -5.218603, -5.215535, -5.212467, -5.209399, -5.206331, -5.203263, -5.200195, -5.197127, -5.194059, -5.190991, -5.187923, -5.184855,
    -5.181787, -5.178719, -5.175651, -5.172583, -5.169515, -5.166447, -5.163379, -5.160311, -5.157243, -5.154175, -5.151107, -5.148040, -5.144972, -5.141904, -5.138836, -5.135768, -5.132700, -5.129632, -5.126564, -5.123496, -5.120428, -5.117360, -5.114292, -5.111224, -5.108156, -5.105088, -5.102020, -5.098952, -5.095884, -5.092816, -5.089748, -5.086680, -5.083612, -5.080544, -5.077476, -5.074408, -5.071340, -5.068273, -5.065205, -5.062137,
    -5.059069, -5.056001, -5.052933, -5.049865, -5.046797, -5.043729, -5.040661, -5.037593, -5.034525, -5.031457, -5.028389, -5.025321, -5.022253, -5.019185, -5.016117, -5.013049, -5.009981, -5.006913, -5.003845, -5.000777, -4.997709, -4.994641, -4.991573, -4.988506, -4.985438, -4.982370, -4.979302, -4.976234, -4.973166, -4.970098, -4.967030, -4.963962, -4.960894, -4.957826, -4.954758, -4.951690, -4.948622, -4.945554, -4.942486, -4.939418,
    -4.936350, -4.933282, -4.930214, -4.927146, -4.924078, -4.921010, -4.917942, -4.914874, -4.911806, -4.908739, -4.905671, -4.902603, -4.899535, -4.896467, -4.893399, -4.890331, -4.887263, -4.884195, -4.881127, -4.878059, -4.874991, -4.871923, -4.868855, -4.865787, -4.862719, -4.859651, -4.856583, -4.853515, -4.850447, -4.847379, -4.844311, -4.841243, -4.838175, -4.835107, -4.832039, -4.828972, -4.825904, -4.822836, -4.819768, -4.816700,
    -4.813632, -4.810564, -4.807496, -4.804428, -4.801360, -4.798292, -4.795224, -4.792156, -4.789088, -4.786020, -4.782952, -4.779884, -4.776816, -4.773748, -4.770680, -4.767612, -4.764544, -4.761476, -4.758408, -4.755340, -4.752272, -4.749205, -4.746137, -4.743069, -4.740001, -4.736933, -4.733865, -4.730797, -4.727729, -4.724661, -4.721593, -4.718525, -4.715457, -4.712389, -4.709321, -4.706253, -4.703185, -4.700117, -4.697049, -4.693981,
    -4.690913, -4.687845, -4.684777, -4.681709, -4.678641, -4.675573, -4.672505, -4.669438, -4.666370, -4.663302, -4.660234, -4.657166, -4.654098, -4.651030, -4.647962, -4.644894, -4.641826, -4.638758, -4.635690, -4.632622, -4.629554, -4.626486, -4.623418, -4.620350, -4.617282, -4.614214, -4.611146, -4.608078, -4.605010, -4.601942, -4.598874, -4.595806, -4.592738, -4.589671, -4.586603, -4.583535, -4.580467, -4.577399, -4.574331, -4.571263,
    -4.568195, -4.565127, -4.562059, -4.558991, -4.555923, -4.552855, -4.549787, -4.546719, -4.543651, -4.540583, -4.537515, -4.534447, -4.531379, -4.528311, -4.525243, -4.522175, -4.519107, -4.516039, -4.512971, -4.509904, -4.506836, -4.503768, -4.500700, -4.497632, -4.494564, -4.491496, -4.488428, -4.485360, -4.482292, -4.479224, -4.476156, -4.473088, -4.470020, -4.466952, -4.463884, -4.460816, -4.457748, -4.454680, -4.451612, -4.448544,
    -4.445476, -4.442408, -4.439340, -4.436272, -4.433204, -4.430137, -4.427069, -4.424001, -4.420933, -4.417865, -4.414797, -4.411729, -4.408661, -4.405593, -4.402525, -4.399457, -4.396389, -4.393321, -4.390253, -4.387185, -4.384117, -4.381049, -4.377981, -4.374913, -4.371845, -4.368777, -4.365709, -4.362641, -4.359573, -4.356505, -4.353437, -4.350370, -4.347302, -4.344234, -4.341166, -4.338098, -4.335030, -4.331962, -4.328894, -4.325826,
    -4.322758, -4.319690, -4.316622, -4.313554, -4.310486, -4.307418, -4.304350, -4.301282, -4.298214, -4.295146, -4.292078, -4.289010, -4.285942, -4.282874, -4.279806, -4.276738, -4.273670, -4.270603, -4.267535, -4.264467, -4.261399, -4.258331, -4.255263, -4.252195, -4.249127, -4.246059, -4.242991, -4.239923, -4.236855, -4.233787, -4.230719, -4.227651, -4.224583, -4.221515, -4.218447, -4.215379, -4.212311, -4.209243, -4.206175, -4.203107,
    -4.200039, -4.196971, -4.193903, -4.190836, -4.187768, -4.184700, -4.181632, -4.178564, -4.175496, -4.172428, -4.169360, -4.166292, -4.163224, -4.160156, -4.157088, -4.154020, -4.150952, -4.147884, -4.144816, -4.141748, -4.138680, -4.135612, -4.132544, -4.129476, -4.126408, -4.123340, -4.120272, -4.117204, -4.114136, -4.111069, -4.108001, -4.104933, -4.101865, -4.098797, -4.095729, -4.092661, -4.089593, -4.086525, -4.083457, -4.080389,
    -4.077321, -4.074253, -4.071185, -4.068117, -4.065049, -4.061981, -4.058913, -4.055845, -4.052777, -4.049709, -4.046641, -4.043573, -4.040505, -4.037437, -4.034369, -4.031302, -4.028234, -4.025166, -4.022098, -4.019030, -4.015962, -4.012894, -4.009826, -4.006758, -4.003690, -4.000622, -3.997554, -3.994486, -3.991418, -3.988350, -3.985282, -3.982214, -3.979146, -3.976078, -3.973010, -3.969942, -3.966874, -3.963806, -3.960738, -3.957670,
    -3.954602, -3.951535, -3.948467, -3.945399, -3.942331, -3.939263, -3.936195, -3.933127, -3.930059, -3.926991, -3.923923, -3.920855, -3.917787, -3.914719, -3.911651, -3.908583, -3.905515, -3.902447, -3.899379, -3.896311, -3.893243, -3.890175, -3.887107, -3.884039, -3.880971, -3.877903, -3.874835, -3.871768, -3.868700, -3.865632, -3.862564, -3.859496, -3.856428, -3.853360, -3.850292, -3.847224, -3.844156, -3.841088, -3.838020, -3.834952,
    -3.831884, -3.828816, -3.825748, -3.822680, -3.819612, -3.816544, -3.813476, -3.810408, -3.807340, -3.804272, -3.801204, -3.798136, -3.795068, -3.792001, -3.788933, -3.785865, -3.782797, -3.779729, -3.776661, -3.773593, -3.770525, -3.767457, -3.764389, -3.761321, -3.758253, -3.755185, -3.752117, -3.749049, -3.745981, -3.742913, -3.739845, -3.736777, -3.733709, -3.730641, -3.727573, -3.724505, -3.721437, -3.718369, -3.715301, -3.712234,
    -3.709166, -3.706098, -3.703030, -3.699962, -3.696894, -3.693826, -3.690758, -3.687690, -3.684622, -3.681554, -3.678486, -3.675418, -3.672350, -3.669282, -3.666214, -3.663146, -3.660078, -3.657010, -3.653942, -3.650874, -3.647806, -3.644738, -3.641670, -3.638602, -3.635534, -3.632467, -3.629399, -3.626331, -3.623263, -3.620195, -3.617127, -3.614059, -3.610991, -3.607923, -3.604855, -3.601787, -3.598719, -3.595651, -3.592583, -3.589515,
    -3.586447, -3.583379, -3.580311, -3.577243, -3.574175, -3.571107, -3.568039, -3.564971, -3.561903, -3.558835, -3.555767, -3.552700, -3.549632, -3.546564, -3.543496, -3.540428, -3.537360, -3.534292, -3.531224, -3.528156, -3.525088, -3.522020, -3.518952, -3.515884, -3.512816, -3.509748, -3.506680, -3.503612, -3.500544, -3.497476, -3.494408, -3.491340, -3.488272, -3.485204, -3.482136, -3.479068, -3.476000, -3.472933, -3.469865, -3.466797,
    -3.463729, -3.460661, -3.457593, -3.454525, -3.451457, -3.448389, -3.445321, -3.442253, -3.439185, -3.436117, -3.433049, -3.429981, -3.426913, -3.423845, -3.420777, -3.417709, -3.414641, -3.411573, -3.408505, -3.405437, -3.402369, -3.399301, -3.396233, -3.393166, -3.390098, -3.387030, -3.383962, -3.380894, -3.377826, -3.374758, -3.371690, -3.368622, -3.365554, -3.362486, -3.359418, -3.356350, -3.353282, -3.350214, -3.347146, -3.344078,
    -3.341010, -3.337942, -3.334874, -3.331806, -3.328738, -3.325670, -3.322602, -3.319534, -3.316466, -3.313399, -3.310331, -3.307263, -3.304195, -3.301127, -3.298059, -3.294991, -3.291923, -3.288855, -3.285787, -3.282719, -3.279651, -3.276583, -3.273515, -3.270447, -3.267379, -3.264311, -3.261243, -3.258175, -3.255107, -3.252039, -3.248971, -3.245903, -3.242835, -3.239767, -3.236699, -3.233632, -3.230564, -3.227496, -3.224428, -3.221360,
    -3.218292, -3.215224, -3.212156, -3.209088, -3.206020, -3.202952, -3.199884, -3.196816, -3.193748, -3.190680, -3.187612, -3.184544, -3.181476, -3.178408, -3.175340, -3.172272, -3.169204, -3.166136, -3.163068, -3.160000, -3.156932, -3.153864, -3.150797, -3.147729, -3.144661, -3.141593, -3.138525, -3.135457, -3.132389, -3.129321, -3.126253, -3.123185, -3.120117, -3.117049, -3.113981, -3.110913, -3.107845, -3.104777, -3.101709, -3.098641,
    -3.095573, -3.092505, -3.089437, -3.086369, -3.083301, -3.080233, -3.077165, -3.074097, -3.071030, -3.067962, -3.064894, -3.061826, -3.058758, -3.055690, -3.052622, -3.049554, -3.046486, -3.043418, -3.040350, -3.037282, -3.034214, -3.031146, -3.028078, -3.025010, -3.021942, -3.018874, -3.015806, -3.012738, -3.009670, -3.006602, -3.003534, -3.000466, -2.997398, -2.994330, -2.991263, -2.988195, -2.985127, -2.982059, -2.978991, -2.975923,
    -2.972855, -2.969787, -2.966719, -2.963651, -2.960583, -2.957515, -2.954447, -2.951379, -2.948311, -2.945243, -2.942175, -2.939107, -2.936039, -2.932971, -2.929903, -2.926835, -2.923767, -2.920699, -2.917631, -2.914563, -2.911496, -2.908428, -2.905360, -2.902292, -2.899224, -2.896156, -2.893088, -2.890020, -2.886952, -2.883884, -2.880816, -2.877748, -2.874680, -2.871612, -2.868544, -2.865476, -2.862408, -2.859340, -2.856272, -2.853204,
    -2.850136, -2.847068, -2.844000, -2.840932, -2.837864, -2.834796, -2.831729, -2.828661, -2.825593, -2.822525, -2.819457, -2.816389, -2.813321, -2.810253, -2.807185, -2.804117, -2.801049, -2.797981, -2.794913, -2.791845, -2.788777, -2.785709, -2.782641, -2.779573, -2.776505, -2.773437, -2.770369, -2.767301, -2.764233, -2.761165, -2.758097, -2.755029, -2.751962, -2.748894, -2.745826, -2.742758, -2.739690, -2.736622, -2.733554, -2.730486,
    -2.727418, -2.724350, -2.721282, -2.718214, -2.715146, -2.712078, -2.709010, -2.705942, -2.702874, -2.699806, -2.696738, -2.693670, -2.690602, -2.687534, -2.684466, -2.681398, -2.678330, -2.675262, -2.672195, -2.669127, -2.666059, -2.662991, -2.659923, -2.656855, -2.653787, -2.650719, -2.647651, -2.644583, -2.641515, -2.638447, -2.635379, -2.632311, -2.629243, -2.626175, -2.623107, -2.620039, -2.616971, -2.613903, -2.610835, -2.607767,
    -2.604699, -2.601631, -2.598563, -2.595495, -2.592428, -2.589360, -2.586292, -2.583224, -2.580156, -2.577088, -2.574020, -2.570952, -2.567884, -2.564816, -2.561748, -2.558680, -2.555612, -2.552544, -2.549476, -2.546408, -2.543340, -2.540272, -2.537204, -2.534136, -2.531068, -2.528000, -2.524932, -2.521864, -2.518796, -2.515728, -2.512661, -2.509593, -2.506525, -2.503457, -2.500389, -2.497321, -2.494253, -2.491185, -2.488117, -2.485049,
    -2.481981, -2.478913, -2.475845, -2.472777, -2.469709, -2.466641, -2.463573, -2.460505, -2.457437, -2.454369, -2.451301, -2.448233, -2.445165, -2.442097, -2.439029, -2.435961, -2.432894, -2.429826, -2.426758, -2.423690, -2.420622, -2.417554, -2.414486, -2.411418, -2.408350, -2.405282, -2.402214, -2.399146, -2.396078, -2.393010, -2.389942, -2.386874, -2.383806, -2.380738, -2.377670, -2.374602, -2.371534, -2.368466, -2.365398, -2.362330,
    -2.359262, -2.356194, -2.353127, -2.350059, -2.346991, -2.343923, -2.340855, -2.337787, -2.334719, -2.331651, -2.328583, -2.325515, -2.322447, -2.319379, -2.316311, -2.313243, -2.310175, -2.307107, -2.304039, -2.300971, -2.297903, -2.294835, -2.291767, -2.288699, -2.285631, -2.282563, -2.279495, -2.276427, -2.273360, -2.270292, -2.267224, -2.264156, -2.261088, -2.258020, -2.254952, -2.251884, -2.248816, -2.245748, -2.242680, -2.239612,
    -2.236544, -2.233476, -2.230408, -2.227340, -2.224272, -2.221204, -2.218136, -2.215068, -2.212000, -2.208932, -2.205864, -2.202796, -2.199728, -2.196660, -2.193593, -2.190525, -2.187457, -2.184389, -2.181321, -2.178253, -2.175185, -2.172117, -2.169049, -2.165981, -2.162913, -2.159845, -2.156777, -2.153709, -2.150641, -2.147573, -2.144505, -2.141437, -2.138369, -2.135301, -2.132233, -2.129165, -2.126097, -2.123029, -2.119961, -2.116893,
    -2.113826, -2.110758, -2.107690, -2.104622, -2.101554, -2.098486, -2.095418, -2.092350, -2.089282, -2.086214, -2.083146, -2.080078, -2.077010, -2.073942, -2.070874, -2.067806, -2.064738, -2.061670, -2.058602, -2.055534, -2.052466, -2.049398, -2.046330, -2.043262, -2.040194, -2.037126, -2.034059, -2.030991, -2.027923, -2.024855, -2.021787, -2.018719, -2.015651, -2.012583, -2.009515, -2.006447, -2.003379, -2.000311, -1.997243, -1.994175,
    -1.991107, -1.988039, -1.984971, -1.981903, -1.978835, -1.975767, -1.972699, -1.969631, -1.966563, -1.963495, -1.960427, -1.957359, -1.954292, -1.951224, -1.948156, -1.945088, -1.942020, -1.938952, -1.935884, -1.932816, -1.929748, -1.926680, -1.923612, -1.920544, -1.917476, -1.914408, -1.911340, -1.908272, -1.905204, -1.902136, -1.899068, -1.896000, -1.892932, -1.889864, -1.886796, -1.883728, -1.880660, -1.877592, -1.874525, -1.871457,
    -1.868389, -1.865321, -1.862253, -1.859185, -1.856117, -1.853049, -1.849981, -1.846913, -1.843845, -1.840777, -1.837709, -1.834641, -1.831573, -1.828505, -1.825437, -1.822369, -1.819301, -1.816233, -1.813165, -1.810097, -1.807029, -1.803961, -1.800893, -1.797825, -1.794758, -1.791690, -1.788622, -1.785554, -1.782486, -1.779418, -1.776350, -1.773282, -1.770214, -1.767146, -1.764078, -1.761010, -1.757942, -1.754874, -1.751806, -1.748738,
    -1.745670, -1.742602, -1.739534, -1.736466, -1.733398, -1.730330, -1.727262, -1.724194, -1.721126, -1.718058, -1.714991, -1.711923, -1.708855, -1.705787, -1.702719, -1.699651, -1.696583, -1.693515, -1.690447, -1.687379, -1.684311, -1.681243, -1.678175, -1.675107, -1.672039, -1.668971, -1.665903, -1.662835, -1.659767, -1.656699, -1.653631, -1.650563, -1.647495, -1.644427, -1.641359, -1.638291, -1.635224, -1.632156, -1.629088, -1.626020,
    -1.622952, -1.619884, -1.616816, -1.613748, -1.610680, -1.607612, -1.604544, -1.601476, -1.598408, -1.595340, -1.592272, -1.589204, -1.586136, -1.583068, -1.580000, -1.576932, -1.573864, -1.570796, -1.567728, -1.564660, -1.561592, -1.558524, -1.555457, -1.552389, -1.549321, -1.546253, -1.543185, -1.540117, -1.537049, -1.533981, -1.530913, -1.527845, -1.524777, -1.521709, -1.518641, -1.515573, -1.512505, -1.509437, -1.506369, -1.503301,
    -1.500233, -1.497165, -1.494097, -1.491029, -1.487961, -1.484893, -1.481825, -1.478757, -1.475690, -1.472622, -1.469554, -1.466486, -1.463418, -1.460350, -1.457282, -1.454214, -1.451146, -1.448078, -1.445010, -1.441942, -1.438874, -1.435806, -1.432738, -1.429670, -1.426602, -1.423534, -1.420466, -1.417398, -1.414330, -1.411262, -1.408194, -1.405126, -1.402058, -1.398990, -1.395923, -1.392855, -1.389787, -1.386719, -1.383651, -1.380583,
    -1.377515, -1.374447, -1.371379, -1.368311, -1.365243, -1.362175, -1.359107, -1.356039, -1.352971, -1.349903, -1.346835, -1.343767, -1.340699, -1.337631, -1.334563, -1.331495, -1.328427, -1.325359, -1.322291, -1.319223, -1.316156, -1.313088, -1.310020, -1.306952, -1.303884, -1.300816, -1.297748, -1.294680, -1.291612, -1.288544, -1.285476, -1.282408, -1.279340, -1.276272, -1.273204, -1.270136, -1.267068, -1.264000, -1.260932, -1.257864,
    -1.254796, -1.251728, -1.248660, -1.245592, -1.242524, -1.239456, -1.236389, -1.233321, -1.230253, -1.227185, -1.224117, -1.221049, -1.217981, -1.214913, -1.211845, -1.208777, -1.205709, -1.202641, -1.199573, -1.196505, -1.193437, -1.190369, -1.187301, -1.184233, -1.181165, -1.178097, -1.175029, -1.171961, -1.168893, -1.165825, -1.162757, -1.159689, -1.156622, -1.153554, -1.150486, -1.147418, -1.144350, -1.141282, -1.138214, -1.135146,
    -1.132078, -1.129010, -1.125942, -1.122874, -1.119806, -1.116738, -1.113670, -1.110602, -1.107534, -1.104466, -1.101398, -1.098330, -1.095262, -1.092194, -1.089126, -1.086058, -1.082990, -1.079922, -1.076855, -1.073787, -1.070719, -1.067651, -1.064583, -1.061515, -1.058447, -1.055379, -1.052311, -1.049243, -1.046175, -1.043107, -1.040039, -1.036971, -1.033903, -1.030835, -1.027767, -1.024699, -1.021631, -1.018563, -1.015495, -1.012427,
    -1.009359, -1.006291, -1.003223, -1.000155, -0.997088, -0.994020, -0.990952, -0.987884, -0.984816, -0.981748, -0.978680, -0.975612, -0.972544, -0.969476, -0.966408, -0.963340, -0.960272, -0.957204, -0.954136, -0.951068, -0.948000, -0.944932, -0.941864, -0.938796, -0.935728, -0.932660, -0.929592, -0.926524, -0.923456, -0.920388, -0.917321, -0.914253, -0.911185, -0.908117, -0.905049, -0.901981, -0.898913, -0.895845, -0.892777, -0.889709,
    -0.886641, -0.883573, -0.880505, -0.877437, -0.874369, -0.871301, -0.868233, -0.865165, -0.862097, -0.859029, -0.855961, -0.852893, -0.849825, -0.846757, -0.843689, -0.840621, -0.837554, -0.834486, -0.831418, -0.828350, -0.825282, -0.822214, -0.819146, -0.816078, -0.813010, -0.809942, -0.806874, -0.803806, -0.800738, -0.797670, -0.794602, -0.791534, -0.788466, -0.785398, -0.782330, -0.779262, -0.776194, -0.773126, -0.770058, -0.766990,
    -0.763922, -0.760854, -0.757787, -0.754719, -0.751651, -0.748583, -0.745515, -0.742447, -0.739379, -0.736311, -0.733243, -0.730175, -0.727107, -0.724039, -0.720971, -0.717903, -0.714835, -0.711767, -0.708699, -0.705631, -0.702563, -0.699495, -0.696427, -0.693359, -0.690291, -0.687223, -0.684155, -0.681087, -0.678020, -0.674952, -0.671884, -0.668816, -0.665748, -0.662680, -0.659612, -0.656544, -0.653476, -0.650408, -0.647340, -0.644272,
    -0.641204, -0.638136, -0.635068, -0.632000, -0.628932, -0.625864, -0.622796, -0.619728, -0.616660, -0.613592, -0.610524, -0.607456, -0.604388, -0.601320, -0.598253, -0.595185, -0.592117, -0.589049, -0.585981, -0.582913, -0.579845, -0.576777, -0.573709, -0.570641, -0.567573, -0.564505, -0.561437, -0.558369, -0.555301, -0.552233, -0.549165, -0.546097, -0.543029, -0.539961, -0.536893, -0.533825, -0.530757, -0.527689, -0.524621, -0.521553,
    -0.518486, -0.515418, -0.512350, -0.509282, -0.506214, -0.503146, -0.500078, -0.497010, -0.493942, -0.490874, -0.487806, -0.484738, -0.481670, -0.478602, -0.475534, -0.472466, -0.469398, -0.466330, -0.463262, -0.460194, -0.457126, -0.454058, -0.450990, -0.447922, -0.444854, -0.441786, -0.438719, -0.435651, -0.432583, -0.429515, -0.426447, -0.423379, -0.420311, -0.417243, -0.414175, -0.411107, -0.408039, -0.404971, -0.401903, -0.398835,
    -0.395767, -0.392699, -0.389631, -0.386563, -0.383495, -0.380427, -0.377359, -0.374291, -0.371223, -0.368155, -0.365087, -0.362019, -0.358952, -0.355884, -0.352816, -0.349748, -0.346680, -0.343612, -0.340544, -0.337476, -0.334408, -0.331340, -0.328272, -0.325204, -0.322136, -0.319068, -0.316000, -0.312932, -0.309864, -0.306796, -0.303728, -0.300660, -0.297592, -0.294524, -0.291456, -0.288388, -0.285320, -0.282252, -0.279185, -0.276117,
    -0.273049, -0.269981, -0.266913, -0.263845, -0.260777, -0.257709, -0.254641, -0.251573, -0.248505, -0.245437, -0.242369, -0.239301, -0.236233, -0.233165, -0.230097, -0.227029, -0.223961, -0.220893, -0.217825, -0.214757, -0.211689, -0.208621, -0.205553, -0.202485, -0.199418, -0.196350, -0.193282, -0.190214, -0.187146, -0.184078, -0.181010, -0.177942, -0.174874, -0.171806, -0.168738, -0.165670, -0.162602, -0.159534, -0.156466, -0.153398,
    -0.150330, -0.147262, -0.144194, -0.141126, -0.138058, -0.134990, -0.131922, -0.128854, -0.125786, -0.122718, -0.119651, -0.116583, -0.113515, -0.110447, -0.107379, -0.104311, -0.101243, -0.098175, -0.095107, -0.092039, -0.088971, -0.085903, -0.082835, -0.079767, -0.076699, -0.073631, -0.070563, -0.067495, -0.064427, -0.061359, -0.058291, -0.055223, -0.052155, -0.049087, -0.046019, -0.042951, -0.039884, -0.036816, -0.033748, -0.030680,
    -0.027612, -0.024544, -0.021476, -0.018408, -0.015340, -0.012272, -0.009204, -0.006136, -0.003068, 0.000000, 0.003068, 0.006136, 0.009204, 0.012272, 0.015340, 0.018408, 0.021476, 0.024544, 0.027612, 0.030680, 0.033748, 0.036816, 0.039884, 0.042951, 0.046019, 0.049087, 0.052155, 0.055223, 0.058291, 0.061359, 0.064427, 0.067495, 0.070563, 0.073631, 0.076699, 0.079767, 0.082835, 0.085903, 0.088971, 0.092039,
    0.095107, 0.098175, 0.101243, 0.104311, 0.107379, 0.110447, 0.113515, 0.116583, 0.119651, 0.122718, 0.125786, 0.128854, 0.131922, 0.134990, 0.138058, 0.141126, 0.144194, 0.147262, 0.150330, 0.153398, 0.156466, 0.159534, 0.162602, 0.165670, 0.168738, 0.171806, 0.174874, 0.177942, 0.181010, 0.184078, 0.187146, 0.190214, 0.193282, 0.196350, 0.199418, 0.202485, 0.205553, 0.208621, 0.211689, 0.214757,
    0.217825, 0.220893, 0.223961, 0.227029, 0.230097, 0.233165, 0.236233, 0.239301, 0.242369, 0.245437, 0.248505, 0.251573, 0.254641, 0.257709, 0.260777, 0.263845, 0.266913, 0.269981, 0.273049, 0.276117, 0.279185, 0.282252, 0.285320, 0.288388, 0.291456, 0.294524, 0.297592, 0.300660, 0.303728, 0.306796, 0.309864, 0.312932, 0.316000, 0.319068, 0.322136, 0.325204, 0.328272, 0.331340, 0.334408, 0.337476,
    0.340544, 0.343612, 0.346680, 0.349748, 0.352816, 0.355884, 0.358952, 0.362019, 0.365087, 0.368155, 0.371223, 0.374291, 0.377359, 0.380427, 0.383495, 0.386563, 0.389631, 0.392699, 0.395767, 0.398835, 0.401903, 0.404971, 0.408039, 0.411107, 0.414175, 0.417243, 0.420311, 0.423379, 0.426447, 0.429515, 0.432583, 0.435651, 0.438719, 0.441786, 0.444854, 0.447922, 0.450990, 0.454058, 0.457126, 0.460194,
    0.463262, 0.466330, 0.469398, 0.472466, 0.475534, 0.478602, 0.481670, 0.484738, 0.487806, 0.490874, 0.493942, 0.497010, 0.500078, 0.503146, 0.506214, 0.509282, 0.512350, 0.515418, 0.518486, 0.521553, 0.524621, 0.527689, 0.530757, 0.533825, 0.536893, 0.539961, 0.543029, 0.546097, 0.549165, 0.552233, 0.555301, 0.558369, 0.561437, 0.564505, 0.567573, 0.570641, 0.573709, 0.576777, 0.579845, 0.582913,
    0.585981, 0.589049, 0.592117, 0.595185, 0.598253, 0.601320, 0.604388, 0.607456, 0.610524, 0.613592, 0.616660, 0.619728, 0.622796, 0.625864, 0.628932, 0.632000, 0.635068, 0.638136, 0.641204, 0.644272, 0.647340, 0.650408, 0.653476, 0.656544, 0.659612, 0.662680, 0.665748, 0.668816, 0.671884, 0.674952, 0.678020, 0.681087, 0.684155, 0.687223, 0.690291, 0.693359, 0.696427, 0.699495, 0.702563, 0.705631,
    0.708699, 0.711767, 0.714835, 0.717903, 0.720971, 0.724039, 0.727107, 0.730175, 0.733243, 0.736311, 0.739379, 0.742447, 0.745515, 0.748583, 0.751651, 0.754719, 0.757787, 0.760854, 0.763922, 0.766990, 0.770058, 0.773126, 0.776194, 0.779262, 0.782330, 0.785398, 0.788466, 0.791534, 0.794602, 0.797670, 0.800738, 0.803806, 0.806874, 0.809942, 0.813010, 0.816078, 0.819146, 0.822214, 0.825282, 0.828350,
    0.831418, 0.834486, 0.837554, 0.840621, 0.843689, 0.846757, 0.849825, 0.852893, 0.855961, 0.859029, 0.862097, 0.865165, 0.868233, 0.871301, 0.874369, 0.877437, 0.880505, 0.883573, 0.886641, 0.889709, 0.892777, 0.895845, 0.898913, 0.901981, 0.905049, 0.908117, 0.911185, 0.914253, 0.917321, 0.920388, 0.923456, 0.926524, 0.929592, 0.932660, 0.935728, 0.938796, 0.941864, 0.944932, 0.948000, 0.951068,
    0.954136, 0.957204, 0.960272, 0.963340, 0.966408, 0.969476, 0.972544, 0.975612, 0.978680, 0.981748, 0.984816, 0.987884, 0.990952, 0.994020, 0.997088, 1.000155, 1.003223, 1.006291, 1.009359, 1.012427, 1.015495, 1.018563, 1.021631, 1.024699, 1.027767, 1.030835, 1.033903, 1.036971, 1.040039, 1.043107, 1.046175, 1.049243, 1.052311, 1.055379, 1.058447, 1.061515, 1.064583, 1.067651, 1.070719, 1.073787,
    1.076855, 1.079922, 1.082990, 1.086058, 1.089126, 1.092194, 1.095262, 1.098330, 1.101398, 1.104466, 1.107534, 1.110602, 1.113670, 1.116738, 1.119806, 1.122874, 1.125942, 1.129010, 1.132078, 1.135146, 1.138214, 1.141282, 1.144350, 1.147418, 1.150486, 1.153554, 1.156622, 1.159689, 1.162757, 1.165825, 1.168893, 1.171961, 1.175029, 1.178097, 1.181165, 1.184233, 1.187301, 1.190369, 1.193437, 1.196505,
    1.199573, 1.202641, 1.205709, 1.208777, 1.211845, 1.214913, 1.217981, 1.221049, 1.224117, 1.227185, 1.230253, 1.233321, 1.236389, 1.239456, 1.242524, 1.245592, 1.248660, 1.251728, 1.254796, 1.257864, 1.260932, 1.264000, 1.267068, 1.270136, 1.273204, 1.276272, 1.279340, 1.282408, 1.285476, 1.288544, 1.291612, 1.294680, 1.297748, 1.300816, 1.303884, 1.306952, 1.310020, 1.313088, 1.316156, 1.319223,
    1.322291, 1.325359, 1.328427, 1.331495, 1.334563, 1.337631, 1.340699, 1.343767, 1.346835, 1.349903, 1.352971, 1.356039, 1.359107, 1.362175, 1.365243, 1.368311, 1.371379, 1.374447, 1.377515, 1.380583, 1.383651, 1.386719, 1.389787, 1.392855, 1.395923, 1.398990, 1.402058, 1.405126, 1.408194, 1.411262, 1.414330, 1.417398, 1.420466, 1.423534, 1.426602, 1.429670, 1.432738, 1.435806, 1.438874, 1.441942,
    1.445010, 1.448078, 1.451146, 1.454214, 1.457282, 1.460350, 1.463418, 1.466486, 1.469554, 1.472622, 1.475690, 1.478757, 1.481825, 1.484893, 1.487961, 1.491029, 1.494097, 1.497165, 1.500233, 1.503301, 1.506369, 1.509437, 1.512505, 1.515573, 1.518641, 1.521709, 1.524777, 1.527845, 1.530913, 1.533981, 1.537049, 1.540117, 1.543185, 1.546253, 1.549321, 1.552389, 1.555457, 1.558524, 1.561592, 1.564660,
    1.567728, 1.570796, 1.573864, 1.576932, 1.580000, 1.583068, 1.586136, 1.589204, 1.592272, 1.595340, 1.598408, 1.601476, 1.604544, 1.607612, 1.610680, 1.613748, 1.616816, 1.619884, 1.622952, 1.626020, 1.629088, 1.632156, 1.635224, 1.638291, 1.641359, 1.644427, 1.647495, 1.650563, 1.653631, 1.656699, 1.659767, 1.662835, 1.665903, 1.668971, 1.672039, 1.675107, 1.678175, 1.681243, 1.684311, 1.687379,
    1.690447, 1.693515, 1.696583, 1.699651, 1.702719, 1.705787, 1.708855, 1.711923, 1.714991, 1.718058, 1.721126, 1.724194, 1.727262, 1.730330, 1.733398, 1.736466, 1.739534, 1.742602, 1.745670, 1.748738, 1.751806, 1.754874, 1.757942, 1.761010, 1.764078, 1.767146, 1.770214, 1.773282, 1.776350, 1.779418, 1.782486, 1.785554, 1.788622, 1.791690, 1.794758, 1.797825, 1.800893, 1.803961, 1.807029, 1.810097,
    1.813165, 1.816233, 1.819301, 1.822369, 1.825437, 1.828505, 1.831573, 1.834641, 1.837709, 1.840777, 1.843845, 1.846913, 1.849981, 1.853049, 1.856117, 1.859185, 1.862253, 1.865321, 1.868389, 1.871457, 1.874525, 1.877592, 1.880660, 1.883728, 1.886796, 1.889864, 1.892932, 1.896000, 1.899068, 1.902136, 1.905204, 1.908272, 1.911340, 1.914408, 1.917476, 1.920544, 1.923612, 1.926680, 1.929748, 1.932816,
    1.935884, 1.938952, 1.942020, 1.945088, 1.948156, 1.951224, 1.954292, 1.957359, 1.960427, 1.963495, 1.966563, 1.969631, 1.972699, 1.975767, 1.978835, 1.981903, 1.984971, 1.988039, 1.991107, 1.994175, 1.997243, 2.000311, 2.003379, 2.006447, 2.009515, 2.012583, 2.015651, 2.018719, 2.021787, 2.024855, 2.027923, 2.030991, 2.034059, 2.037126, 2.040194, 2.043262, 2.046330, 2.049398, 2.052466, 2.055534,
    2.058602, 2.061670, 2.064738, 2.067806, 2.070874, 2.073942, 2.077010, 2.080078, 2.083146, 2.086214, 2.089282, 2.092350, 2.095418, 2.098486, 2.101554, 2.104622, 2.107690, 2.110758, 2.113826, 2.116893, 2.119961, 2.123029, 2.126097, 2.129165, 2.132233, 2.135301, 2.138369, 2.141437, 2.144505, 2.147573, 2.150641, 2.153709, 2.156777, 2.159845, 2.162913, 2.165981, 2.169049, 2.172117, 2.175185, 2.178253,
    2.181321, 2.184389, 2.187457, 2.190525, 2.193593, 2.196660, 2.199728, 2.202796, 2.205864, 2.208932, 2.212000, 2.215068, 2.218136, 2.221204, 2.224272, 2.227340, 2.230408, 2.233476, 2.236544, 2.239612, 2.242680, 2.245748, 2.248816, 2.251884, 2.254952, 2.258020, 2.261088, 2.264156, 2.267224, 2.270292, 2.273360, 2.276427, 2.279495, 2.282563, 2.285631, 2.288699, 2.291767, 2.294835, 2.297903, 2.300971,
    2.304039, 2.307107, 2.310175, 2.313243, 2.316311, 2.319379, 2.322447, 2.325515, 2.328583, 2.331651, 2.334719, 2.337787, 2.340855, 2.343923, 2.346991, 2.350059, 2.353127, 2.356194, 2.359262, 2.362330, 2.365398, 2.368466, 2.371534, 2.374602, 2.377670, 2.380738, 2.383806, 2.386874, 2.389942, 2.393010, 2.396078, 2.399146, 2.402214, 2.405282, 2.408350, 2.411418, 2.414486, 2.417554, 2.420622, 2.423690,
    2.426758, 2.429826, 2.432894, 2.435961, 2.439029, 2.442097, 2.445165, 2.448233, 2.451301, 2.454369, 2.457437, 2.460505, 2.463573, 2.466641, 2.469709, 2.472777, 2.475845, 2.478913, 2.481981, 2.485049, 2.488117, 2.491185, 2.494253, 2.497321, 2.500389, 2.503457, 2.506525, 2.509593, 2.512661, 2.515728, 2.518796, 2.521864, 2.524932, 2.528000, 2.531068, 2.534136, 2.537204, 2.540272, 2.543340, 2.546408,
    2.549476, 2.552544, 2.555612, 2.558680, 2.561748, 2.564816, 2.567884, 2.570952, 2.574020, 2.577088, 2.580156, 2.583224, 2.586292, 2.589360, 2.592428, 2.595495, 2.598563, 2.601631, 2.604699, 2.607767, 2.610835, 2.613903, 2.616971, 2.620039, 2.623107, 2.626175, 2.629243, 2.632311, 2.635379, 2.638447, 2.641515, 2.644583, 2.647651, 2.650719, 2.653787, 2.656855, 2.659923, 2.662991, 2.666059, 2.669127,
    2.672195, 2.675262, 2.678330, 2.681398, 2.684466, 2.687534, 2.690602, 2.693670, 2.696738, 2.699806, 2.702874, 2.705942, 2.709010, 2.712078, 2.715146, 2.718214, 2.721282, 2.724350, 2.727418, 2.730486, 2.733554, 2.736622, 2.739690, 2.742758, 2.745826, 2.748894, 2.751962, 2.755029, 2.758097, 2.761165, 2.764233, 2.767301, 2.770369, 2.773437, 2.776505, 2.779573, 2.782641, 2.785709, 2.788777, 2.791845,
    2.794913, 2.797981, 2.801049, 2.804117, 2.807185, 2.810253, 2.813321, 2.816389, 2.819457, 2.822525, 2.825593, 2.828661, 2.831729, 2.834796, 2.837864, 2.840932, 2.844000, 2.847068, 2.850136, 2.853204, 2.856272, 2.859340, 2.862408, 2.865476, 2.868544, 2.871612, 2.874680, 2.877748, 2.880816, 2.883884, 2.886952, 2.890020, 2.893088, 2.896156, 2.899224, 2.902292, 2.905360, 2.908428, 2.911496, 2.914563,
    2.917631, 2.920699, 2.923767, 2.926835, 2.929903, 2.932971, 2.936039, 2.939107, 2.942175, 2.945243, 2.948311, 2.951379, 2.954447, 2.957515, 2.960583, 2.963651, 2.966719, 2.969787, 2.972855, 2.975923, 2.978991, 2.982059, 2.985127, 2.988195, 2.991263, 2.994330, 2.997398, 3.000466, 3.003534, 3.006602, 3.009670, 3.012738, 3.015806, 3.018874, 3.021942, 3.025010, 3.028078, 3.031146, 3.034214, 3.037282,
    3.040350, 3.043418, 3.046486, 3.049554, 3.052622, 3.055690, 3.058758, 3.061826, 3.064894, 3.067962, 3.071030, 3.074097, 3.077165, 3.080233, 3.083301, 3.086369, 3.089437, 3.092505, 3.095573, 3.098641, 3.101709, 3.104777, 3.107845, 3.110913, 3.113981, 3.117049, 3.120117, 3.123185, 3.126253, 3.129321, 3.132389, 3.135457, 3.138525, 3.141593, 3.144661 };



#define pi 3.1416

#define ii sqrt(-1) //for i^nbands in orientation calculation


Mat A[100];
int count_size=0;

Mat pointop(Mat fa, float lut[], float origin, float increment,int nsize,int lutsize)
{
    //float *res= new float [nsize];
    
    int  index;
    float pos;
    Mat res(fa.rows,fa.cols,CV_32F);
    if (increment > 0)
    {
        for (int i = 0; i < nsize; i++)
        {
            pos = (fa.at<float>(i) - origin) / increment;
            index = (int)pos;
            if (index < 0)
            {
                index = 0;
            }
            else if (index > lutsize)
            {
                index = lutsize;
            }
            
            
            res.at<float>(i) =lut[index]+ (lut[index + 1] - lut[index]) * (pos - index);
            
        }
    }
    else
    {
        for (int i = 0; i < nsize; i++)
        {
            res.at<float>(i) =(float) lut[0];
            
        }
    }
    
    
    return res;
    
}


Mat fftshift(Mat input)
{
    int m,n,xMid,yMid;
    m=input.cols;
    n=input.rows;
    xMid=m>>1;
    yMid=n>>1;
    Mat tmp;
    Mat q0(input, Rect(0,    0,    xMid, yMid));
    Mat q1(input, Rect(xMid, 0,    xMid, yMid));
    Mat q2(input, Rect(0,    yMid, xMid, yMid));
    Mat q3(input, Rect(xMid, yMid, xMid, yMid));
    
    q0.copyTo(tmp);
    q3.copyTo(q0);
    tmp.copyTo(q3);
    
    q1.copyTo(tmp);
    q2.copyTo(q1);
    tmp.copyTo(q2);
    
    q0.copyTo(input(Rect(0,    0,    xMid, yMid)));
    q1.copyTo(input(Rect(xMid, 0,    xMid, yMid)));
    q2.copyTo(input(Rect(0,    yMid, xMid, yMid)));
    q3.copyTo(input(Rect(xMid, yMid, xMid, yMid)));
    
    return input;
    
    
}

Mat ifftshift(Mat input)
{
    int m,n,xMid,yMid;
    m=input.cols;
    n=input.rows;
    xMid=m>>1;
    yMid=n>>1;
    Mat tmp;
    Mat q0(input, Rect(0,    0,    xMid, yMid));
    Mat q1(input, Rect(xMid, 0,    xMid, yMid));
    Mat q2(input, Rect(0,    yMid, xMid, yMid));
    Mat q3(input, Rect(xMid, yMid, xMid, yMid));
    
    q3.copyTo(tmp);
    q0.copyTo(q3);
    tmp.copyTo(q0);
    
    q2.copyTo(tmp);
    q1.copyTo(q2);
    tmp.copyTo(q1);
    
    
    q0.copyTo(input(Rect(0,    0,    xMid, yMid)));
    q1.copyTo(input(Rect(xMid, 0,    xMid, yMid)));
    q2.copyTo(input(Rect(0,    yMid, xMid, yMid)));
    q3.copyTo(input(Rect(xMid, yMid, xMid, yMid)));
    
    return input;
    
    
}
Mat resize_mat(Mat im,float sca)
{
    int m=im.rows;
    int n=im.cols;
    Mat im2d=im.reshape(0,m);
    
    int sa=ceil(m/2.0),sb=ceil(n/2.0);
    int cst=sb-ceil(sb/(sca+0.0)),rst=sa-ceil(sa/(sca+0.0));
    int cend=sb+ceil(sb/(sca+0.0)),rend=sa+ceil(sa/(sca+0.0));
    
    m=rend-rst;
    n=cend-cst;
    
    
    
    Mat dummy_im(im2d, Rect(0,0,n, m));
    
    Mat im2;
    dummy_im.copyTo(im2);
    return im2;
    
}

//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH




int buildSCFpyrlevs(Mat &X,Mat *lodft, Mat radd, float *Xrcos, float *Yrcos, Mat angld, int ht, int nbands,int m,int n)
{
    int nsize=m*n;
    if(ht<0)
    {
        lodft[0]=ifftshift(lodft[0]);
        lodft[1]=ifftshift(lodft[1]);
        Mat xs,res;
        merge(lodft,2,xs);
        dft(xs,res,DFT_INVERSE|DFT_REAL_OUTPUT);
        Mat zz;
        res.convertTo(zz,CV_8U,255,0);
        imwrite("lowpass.jpg",zz);
        zz.copyTo(A[count_size]);
        zz.copyTo(X);
        return 1;
        
    }
    else
    {
        for (int i = 0; i < 258; i++)
        {
            Xrcos[i] = Xrcos[i] -1;
        
        }
        
        int order = nbands - 1;
        float consta, alp;
        consta = pow(2.0, order * 2)*pow(facto[order], 2) / (nbands*facto[2 * order]);
        
        //Used for orientation interpolation
        for (int i = 0; i < 3074; i++)
        {
            alp = fabs(fmod(pi + Xcosn[i], 2 * pi)) - pi;
            Ycosn[i] = 2 * sqrt(consta)*pow(cos(Xcosn[i]), order)*(fabs(alp) < pi / 2);
            
            
        }
        
        //Initialization and definition of variables
        Mat himask1(nsize,1,CV_32F);
        Mat himask(m,n,CV_32F);
        Mat anglemask1(nsize,1,CV_32F);
        Mat interx;
        Mat tmp(m,n,CV_32F);
        Mat banddft[2];
        Mat band;
        Mat anglemask;
        
        himask1=pointop(radd,Yrcos,Xrcos[0],Xrcos[1]-Xrcos[0],nsize,257);
        himask=himask1.reshape(0,m);
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        //Saving highpass mask for reference
        Mat hi=himask1.reshape(0,m);
        Mat hiw;
        hi.convertTo(hiw,CV_8U,255,0);
        imwrite("hi1.jpg",hiw);
        
        //Saving end
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        for(int i=0;i<nbands;i++)
        {
            anglemask1=pointop(angld,Ycosn, Xcosn[0]+(pi*i/nbands),Xcosn[1]-Xcosn[0],nsize,3074);
            anglemask=anglemask1.reshape(0,m);
            
            tmp=anglemask.mul(himask);
            banddft[0]=(lodft[0]*rela[nbands]-lodft[1]*imagn[nbands]).mul(tmp);
            
            banddft[1]=(lodft[1]*rela[nbands]+lodft[0]*imagn[nbands]).mul(tmp);
            
            
            banddft[0]=ifftshift(banddft[0]);
            banddft[1]=ifftshift(banddft[1]);
            merge(banddft,2,interx);
            dft(interx, band, DFT_INVERSE | DFT_REAL_OUTPUT ); // Applying IDFT
            
            normalize(band, band, 0, 255, NORM_MINMAX, -1);
            Mat bandch;
            band.convertTo(bandch,CV_8U,1,0);
            char abc[100]="band";
            char xcc[10];
            char xb[6];
            char bcc[10]=".jpg";
            //itoa(i,xb,8);
            //itoa(ht,xcc,8);
            sprintf(xb, "%d",i);
            sprintf(xcc, "%d",ht);
            strcat(abc,xcc);
            strcat(abc,xb);
            strcat(abc,bcc);
            bandch.copyTo(A[count_size]);
            count_size=count_size+1;
            imwrite(abc,bandch);
            
        }
        
        
        
        
        
        
        
        
        //for next step
        Mat rad2d=radd.reshape(0,m);
        Mat ang2d=angld.reshape(0,m);
        
        
        
        int sa=ceil(m/2.0),sb=ceil(n/2.0);
        int cst=ceil(sb/2.0),rst=ceil(sa/2.0);
        
        
        m=sa;
        n=sb;
        
        nsize=m*n;
        
        Mat dummy_lodftr(lodft[0], Rect(cst,rst,n, m));
        Mat dummy_lodftim(lodft[1], Rect(cst,rst,n, m));
        
        Mat lodft1[]={Mat_<float>(dummy_lodftr), Mat::zeros(dummy_lodftr.size(), CV_32F)};
        
        dummy_lodftr.copyTo(lodft1[0]);
        dummy_lodftim.copyTo(lodft1[1]);
        Mat dummy_angl(ang2d, Rect(cst,rst,n, m));
        Mat dummy_radd(rad2d, Rect(cst,rst,n, m));
        
        Mat ra2,an2;
        
        dummy_angl.copyTo(an2);
        dummy_radd.copyTo(ra2);
        
        Mat ra1=ra2.reshape(0,1);
        Mat an1=an2.reshape(0,1);
        for (int i = 0; i < 259;i++)
        {
            YIrcos_abs[i] = fabs(YIrcos[i]);
        }
        
        Mat lomask1=pointop(ra1,YIrcos_abs,Xrcos[0],Xrcos[1]-Xrcos[0],nsize,257);
        
        Mat lomask=lomask1.reshape(0,m);
        
        
        
        lodft1[0]=lodft1[0].mul(lomask);
        lodft1[1]=lodft1[1].mul(lomask);
        
        
        buildSCFpyrlevs(X,lodft1,ra1,Xrcos,Yrcos,an1,ht-1,nbands,m,n);
        
    }
    
    return 0;
    
    
}

//NNNNNNNNNnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn

Mat* buildpyr(Mat im)
{
    int m=im.rows;
    int n=im.cols;
    int ht=3,nbands=4;
    int nsize=m*n;
    Mat imf(m,n,CV_32F),img(m,n,CV_8U);
    im.convertTo(img,CV_8U);
    img.convertTo(imf, CV_32F,1.0/255,0);
    Mat ima(m,n,CV_32F);
    
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    //Compute radius and angle matrix base for a given size of m,n
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    
    
    
    
    Mat x, y;
    x.create(m,n,CV_32F);
    y.create(m,n,CV_32F);
    for (int i = 0; i < n; i++)
    {
        x.at<float>(0,i) = (-.5 + (float)i / n)*2;
    }
    for (int i = 0; i < m; i++)
    {
        y.at<float>(i,0) = (-.5 + (float)i / m)*2;
    }
    
    x = repeat(x.row(0),m,1);
    y = repeat(y.col(0),1,n);
    
    
    Mat rad2(m,n,CV_32F),ang2(m,n,CV_32F);
    for (int i = 0; i < m; i++)
    {for (int j = 0; j < n; j++)
    {
        float trad= sqrt(x.at<float>(i,j)*x.at<float>(i,j)+y.at<float>(i,j)*y.at<float>(i,j));
        
        if(trad!=0)
        {
            rad2.at<float>(i,j)= log10(trad)/log10(2.0);
        }
        else
        {
            rad2.at<float>(i,j)=rad2.at<float>(i,j-1);
        }
        
        ang2.at<float>(i,j)=atan2(y.at<float>(i,j),x.at<float>(i,j));
        
    }
    }
    
    //Convert 1D to 2D
    Mat angld(nsize,1,CV_32F),radd(nsize,1,CV_32F),lo1d(nsize,1,CV_32F),hi1d(nsize,1,CV_32F);
    radd=rad2.reshape(0,1);
    angld=ang2.reshape(0,1);
    
    
    lo1d=pointop(radd,YIrcos,Xrcos[0],Xrcos[1]-Xrcos[0],nsize,257);
    hi1d=pointop(radd,Yrcos,Xrcos[0],Xrcos[1]-Xrcos[0],nsize,257);
    
    //2d of above lowpass and highass kernals
    Mat lo2d(m,n,CV_32F),hi2d(m,n,CV_32F);
    
    lo2d=lo1d.reshape(0,im.rows);
    hi2d=hi1d.reshape(0,im.rows);
    
    
    
    //DFT of the image
    Mat dft_im,inversehi;
    Mat re_ima_dft[] = {Mat_<float>(im), Mat::zeros(im.size(), CV_32F)};
    Mat lowpas_1[] = {Mat_<float>(im), Mat::zeros(im.size(), CV_32F)};
    Mat hipass_1[] = {Mat_<float>(im), Mat::zeros(im.size(), CV_32F)};
    
    dft(imf, dft_im,DFT_SCALE| DFT_COMPLEX_OUTPUT);
    split(dft_im,re_ima_dft);   //split fft to real and imaginary parts
    double min, max;
    
    
    re_ima_dft[0]=fftshift(re_ima_dft[0]);
    re_ima_dft[1]=fftshift(re_ima_dft[1]);
    
   	
    lowpas_1[0]=re_ima_dft[0].mul(lo2d);
    lowpas_1[1]=re_ima_dft[1].mul(lo2d);
    
    hipass_1[0]=re_ima_dft[0].mul(hi2d);
    hipass_1[1]=re_ima_dft[1].mul(hi2d);
    
    hipass_1[0]=ifftshift(hipass_1[0]);
    hipass_1[1]=ifftshift(hipass_1[1]);
    Mat fin_hi;
    merge(hipass_1,2,fin_hi);
    dft(fin_hi,inversehi,DFT_INVERSE|DFT_REAL_OUTPUT);
    Mat hi_char;
    normalize(inversehi, inversehi, 0, 255, NORM_MINMAX, -1);
    inversehi.convertTo(hi_char,CV_8U,1,0);
    hi_char.copyTo(A[count_size]);
    count_size=count_size+1;
    
    imwrite("/Users/sohaib/workspcae/steer_p/steer_p/highpass_scale0.jpg",hi_char);
    
    Mat X;
    buildSCFpyrlevs(X,lowpas_1,radd,Xrcos,Yrcos,angld,ht-1,nbands,m,n);
    imwrite("/Users/sohaib/workspcae/steer_p/steer_p/dd.jpg",A[1]);
    
    return A;
    
    
    
}

//===============================================================================
//Reconsfpyr
//===============================================================================

Mat reconSFpyr(Mat *im,int pos,Mat radd, float *Xrcos,float *Yrcos, Mat angld,int nbands)
{
    
    for (int i = 0; i < 258; i++)
    {
        Xrcos[i] = Xrcos[i]-1;
        
    }
    Mat im1[10];
    for(int i=0;i<nbands;i++)
    {
        im1[i]=im[pos+i];
    }
    int m=im1[0].rows,n=im1[0].cols;
    int nsize=m*n;
    int order=nbands-1;
    float consta;
    float rei=0,imi=1;
    consta = pow(2.0, order * 2)*pow(facto[order], 2) / (nbands*facto[2 * order]);
    
    //Used for orientation interpolation
    for (int i = 0; i < 3074; i++)
    {
        Ycosn[i] = 2 * sqrt(consta)*pow(cos(Xcosn[i]), order);
        
    }
    Mat anglemask1,anglemask;
    Mat himask;
    Mat himask1=pointop(radd,YIrcos,Xrcos[0],Xrcos[1]-Xrcos[0],nsize,257);
    himask=himask1.reshape(0,m);
    Mat banddft,band[3];
    Mat resdft[] = {Mat_<float>(im1[0]), Mat::zeros(im1[0].size(), CV_32F)};
    Mat tmp;
    for(int i=0;i<nbands;i++)
    {
        anglemask1=pointop(angld,Ycosn, Xcosn[0]+(pi*i/nbands),Xcosn[1]-Xcosn[0],nsize,3074);
        anglemask=anglemask1.reshape(0,m);
        dft(im1[i],banddft,DFT_SCALE|DFT_COMPLEX_OUTPUT);
        split(banddft,band);
        tmp=anglemask.mul(himask);
        band[0]=fftshift(band[0]);
        band[1]=fftshift(band[1]);
        resdft[0]=resdft[0]+(band[0]*rei-band[1]*imi).mul(tmp);
        
        resdft[1]=resdft[1]+(band[1]*rei+band[0]*imi).mul(tmp);
    }
    Mat retres;
    merge(resdft,2,retres);
    
    return retres;
}



//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//reconstruction function
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Mat reconpyr(Mat *im1)
{
    Mat im[100];
    int ht=3,nbands=4;
    for(int i=0;i<(ht*nbands)+2;i++)
    {
        im1[i].convertTo(im[i],CV_32F,(1.0/255.0),0);
        
    }
    
    int m=im[0].rows;
    int n=im[0].cols;
    
    int nsize=m*n;
    
    for (int i = 0; i < 258; i++)
    {
        Xrcos[i] = Xrcos[i]+ht;
        
    }
    
    Mat x, y;
    x.create(m,n,CV_32F);
    y.create(m,n,CV_32F);
    for (int i = 0; i < n; i++)
    {
        x.at<float>(0,i) = (-.5 + (float)i / n)*2;
    }
    for (int i = 0; i < m; i++)
    {
        y.at<float>(i,0) = (-.5 + (float)i / m)*2;
    }
    
    x = repeat(x.row(0),m,1);
    y = repeat(y.col(0),1,n);
    
    
    Mat rad2(m,n,CV_32F),ang2(m,n,CV_32F);
    for (int i = 0; i < m; i++)
    {for (int j = 0; j < n; j++)
    {
        float trad= sqrt(x.at<float>(i,j)*x.at<float>(i,j)+y.at<float>(i,j)*y.at<float>(i,j));
        
        if(trad!=0)
        {
            rad2.at<float>(i,j)= log10(trad)/log10(2.0);
        }
        else
        {
            rad2.at<float>(i,j)=rad2.at<float>(i,j-1);
        }
        
        ang2.at<float>(i,j)=atan2(y.at<float>(i,j),x.at<float>(i,j));
        
    }
    }
    
    //Convert 1D to 2D
    Mat angld(nsize,1,CV_32F),radd(nsize,1,CV_32F),lo1d(nsize,1,CV_32F),hi1d(nsize,1,CV_32F);
    radd=rad2.reshape(0,1);
    angld=ang2.reshape(0,1);
    
    lo1d=pointop(radd,YIrcos,Xrcos[0],Xrcos[1]-Xrcos[0],nsize,257);
    hi1d=pointop(radd,Yrcos,Xrcos[0],Xrcos[1]-Xrcos[0],nsize,257);
    
    //2d of above lowpass and highass kernals
    Mat lo2d(m,n,CV_32F),hi2d(m,n,CV_32F);
    
    lo2d=lo1d.reshape(0,m);
    hi2d=hi1d.reshape(0,m);
    Mat reco,mradd,mangld,resq[10],imsq[10];
    int pos=1;
    for(int i=0;i<ht;i++)
    {
        mradd=resize_mat(radd,pow(2.0,i));
        mangld=resize_mat(mradd,pow(2.0,i));
        
        reco=reconSFpyr(im,pos,mradd,Xrcos,Yrcos,mangld,nbands);
        Mat acx[2];
        split(reco,acx);
        acx[0].copyTo(resq[i]);
        acx[1].copyTo(imsq[i]);
        pos=pos+nbands;
    }
    for(int i=1;i<ht;i++)
    {
        int sa=ceil(m/2.0),sb=ceil(n/2.0);
        int cst=sb-ceil(resq[i].cols/2.0),rst=sa-ceil(resq[i].rows/2.0);
        int mz=resq[i].rows,nz=resq[i].cols;
        resq[i].copyTo(resq[0](Rect(cst,rst,nz,mz)));
        imsq[i].copyTo(imsq[0](Rect(cst,rst,nz,mz)));
    }
    int sa=ceil(m/2.0),sb=ceil(n/2.0);
    int cst=sb-ceil(im[ht*nbands+1].cols/2.0),rst=sa-ceil(im[ht*nbands+1].rows/2.0);
    Mat lo_im;
    im[ht*nbands+1].copyTo(lo_im);
    Mat lo_dft,lodfts[4];
    dft(lo_im,lo_dft,DFT_SCALE|DFT_COMPLEX_OUTPUT);
    split(lo_dft,lodfts);
    
    lodfts[0].copyTo(resq[0](Rect(cst,rst,lo_im.cols,lo_im.rows)));
    lodfts[1].copyTo(imsq[0](Rect(cst,rst,lo_im.cols,lo_im.rows)));
    
    resq[0]=resq[0].mul(lo2d);
    imsq[0]=imsq[0].mul(lo2d);
    Mat fi[3];
    resq[0].copyTo(fi[0]);
    imsq[0].copyTo(fi[1]);
    Mat ficomlx;
    merge(fi,2,ficomlx);
    Mat resu;
    dft(ficomlx,resu,DFT_INVERSE|DFT_REAL_OUTPUT);
    normalize(resu, resu, 128, 255, NORM_MINMAX, -1);
    Mat fich;
    resu.convertTo(fich,CV_8U,1.0,0);
    imwrite("/Users/sohaib/workspcae/steer_p/steer_p/reco.jpg",resu);
    
    
    
    return im[0];	
    
    
    
    
}





int main(void)
{
    FILE *pInpVideo_one, *pTestOut;
    unsigned char *pYFrame, *pUFrame, *pVFrame;
    //*pYFrame_one, *pUFrame_one, *pVFrame_one, *pYFrame_two, *pUFrame_two, *pVFrame_two;
    int nHeight = 480;
    int nWidth = 832, nbands = 4,scale=3;
    int nSize = nHeight*nWidth;
    
    int nWidth_out = nWidth * 2;
    int nSize_out = nHeight*nWidth_out;
    
    unsigned char *pYFrame_one = new unsigned char[(sizeof(unsigned char)* nSize)];
    unsigned char *pUFrame_one = new unsigned char[(sizeof(unsigned char)*(nSize / 4))]; // un byte per ogni 4 pixel
    unsigned char *pVFrame_one = new unsigned char[(sizeof(unsigned char)*(nSize / 4))]; // un byte per ogni 4 pixel
    
    //fopen_s(&pInpVideo_one, "Disk.yuv", "r+");
    //output as YUV
   // fopen_s(&pTestOut, "testuscita_832x480.yuv", "w+");
    Mat image=imread("/Users/sohaib/workspcae/steer_p/steer_p/Lenna.png", CV_LOAD_IMAGE_GRAYSCALE );
    Mat *mma;
    
    mma=buildpyr(image);
    
    reconpyr(mma);
    //imwrite("/Users/sohaib/workspcae/steer_p/steer_p/output.jpg",mma);
    
    
    //waitKey(0);
    /*fread(pYFrame_one, sizeof(unsigned char), (nSize), pInpVideo_one);
    fread(pUFrame_one, sizeof(unsigned char), (nSize) / 4, pInpVideo_one);
    fread(pVFrame_one, sizeof(unsigned char), (nSize) / 4, pInpVideo_one);
    //things to be done
    //call function to calculate subbands
    
    
    
    fwrite(pYFrame_one, sizeof(unsigned char), (nSize), pTestOut);
    fseek(pTestOut, 0, SEEK_END);
    
    
    
    
    fwrite(pUFrame_one, sizeof(unsigned char), (nSize)/4, pTestOut);
    fseek(pTestOut, 0, SEEK_END);
    
    
    
    
    fwrite(pVFrame_one, sizeof(unsigned char), (nSize) /4, pTestOut);
    fseek(pTestOut, 0, SEEK_END);
    
    cout<<"Finished"<<endl;
    fclose(pTestOut);
    fclose(pInpVideo_one);*/
    cout<<"Finished"<<endl;
    delete[] pYFrame_one;
    delete[] pUFrame_one;
    delete[] pVFrame_one;
    
    
    return 1;
}






